{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Ring - cross-platform meta-orchestrator for developers","text":"<p>Warning</p> <p>Work in progress. The docs are not yet complete.</p> <p>Ring is a cross-platform command-line tool that can run and monitor workspaces built of apps (aka runnables) - e.g. processes, Docker Compose files, Kustomize apps, and more). Workspaces are declarative configuration files (using TOML format). Ring exposes a web-socket server. Clients (like the VS Code extension) can use it to control Ring and subscribe to real-time apps status notifications.</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Ring is a dotnet cli tool which means it requires Dotnet SDK. Various app types may require additional components. Read more in the authoring workspaces section.</p>"},{"location":"authoring-workspaces/","title":"Authoring workspaces","text":"<p>Workspaces are TOML files and they mostly use the arrays of tables to define workspace components.</p>"},{"location":"authoring-workspaces/#apps","title":"Apps","text":""},{"location":"authoring-workspaces/#kustomize-app","title":"Kustomize app","text":"<p>Requirements:</p> <ul> <li>local Kubernetes cluster</li> <li>kubectl</li> <li>kustomize</li> </ul> <pre><code>[[kustomize]]\npath = \"path/to/app\"\n</code></pre>"},{"location":"authoring-workspaces/#docker-compose-app","title":"Docker Compose app","text":"<p>Requirements:</p> <ul> <li>Docker Desktop</li> </ul> <pre><code>[[dockercompose]]\npath = \"path/to/docker-compose.yml\"\n</code></pre>"},{"location":"authoring-workspaces/#dotnet-app","title":"Dotnet app","text":"<p>Requirements:</p> <ul> <li>Dotnet SDK</li> </ul> <pre><code>[[aspnetcore]]\ncsproj = \"/path/to/your/project.csproj\"\n</code></pre>"},{"location":"authoring-workspaces/#process","title":"Process","text":"<pre><code>[[proc]]\ncommand = \"sleep\"\nargs = [\"30\"]\n\n[proc.env]\n    MY_TEST_ENV_VAR = \"NONSENSE\"\n    YET_ANOTHER = \"QUIT\"\n</code></pre>"},{"location":"authoring-workspaces/#example","title":"Example","text":"<p>Running a service via dotnet watch</p> <pre><code>[[proc]]\nid = \"my.project\"\ncommand = \"dotnet\"\nargs = [\"watch\", \"--project\", \"path/to/proj\"]\n\n[proc.env]\n  URLS = \"https://localhost:8080\"\n</code></pre>"},{"location":"authoring-workspaces/#legacy-formats","title":"Legacy formats","text":""},{"location":"authoring-workspaces/#aspnet-core-iis-express","title":"ASP.NET Core (IIS Express)","text":"<p>Requirements:</p> <ul> <li>Dotnet SDK</li> </ul> <pre><code>[[iisxcore]]\ncsproj = \"path/to/your/project.csproj\"\n</code></pre>"},{"location":"authoring-workspaces/#net-framework-web-service-iis-express","title":".NET Framework web service (IIS Express)","text":"<p>Legacy Windows web services like AspNet MVC or WCF</p> <p>Requirements:</p> <ul> <li>.NET Framework (4.*)</li> </ul> <pre><code>[[iisexpress]]\ncsproj = \"path/to/your/project.csproj\"\n</code></pre>"},{"location":"authoring-workspaces/#net-framework-executable-project","title":".NET Framework executable project","text":"<p>Legacy Windows services like TopShelf</p> <p>Requirements:</p> <ul> <li>.NET Framework (4.*)</li> </ul> <pre><code>[[netexe]]\ncsproj = \"path/to/your/project.csproj\"\n</code></pre>"},{"location":"authoring-workspaces/#imports","title":"Imports","text":"<p>Ring workspaces can be composed from other workspaces. If the same app is declared multiple times in imported  workspaces they will be deduplicated and only one instance of an app will be launched.</p> <p>Simplified syntax:</p> <pre><code>imports = [\n  \"path/to/workspace/a.toml\",\n  \"path/to/workspace/b.toml\",\n  \"path/to/yet/another/workspace/c.toml\"\n]\n</code></pre> <p>Classic syntax:</p> <pre><code>[[import]]\npath = \"path/to/workspace/a.toml\"\n\n[[import]]\npath = \"path/to/workspace/b.toml\"\n\n[[import]]\npath = \"path/to/yet/another/workspace/c.toml\"\n</code></pre>"},{"location":"authoring-workspaces/#comment","title":"Comment","text":"<pre><code># This is a comment\n# [[aspnetcore]]\n# csproj = \"/path/to/your/project.csproj\"\n</code></pre>"},{"location":"authoring-workspaces/#running-multiple-instances-of-an-app","title":"Running multiple instances of an app","text":"<p> v4 only</p> <p>If there are two (or more) apps with the same identifier Ring de-duplicates them and only runs a single instance. Sometimes the user may want run multiple instances of a single app. Each instance can be  configured with an <code>id</code> key as follows:</p> <p><pre><code>[[proc]]\ncommand = \"sleep\"\nargs = [\"30\"]\nid = \"sleep-1\"\n\n[[proc]]\ncommand = \"sleep\"\nargs = [\"60\"]\nid = \"sleep-2\"\n</code></pre> Now ring runs two <code>sleep</code> processes.</p>"},{"location":"authoring-workspaces/#workspace-flavours","title":"Workspace flavours","text":"<p> v4 only</p> <p>Sometimes the user may have multiple workspaces that significantly overlap. Stopping one workspace and starting another may be quite slow if there are tens of apps. Flavours help to solve that problem with only stopping apps that are not included in the new workspace and only starting the ones that were not running in the previous one. All the apps existing in both keep happily running.</p> <p> Example</p> <p>Flavours are specified with <code>tags</code> and each app can have multiple. The below workspace has 3 flavours: <code>a</code>, <code>b</code>, and <code>backend</code>.</p> <p>Given we run flavour <code>a</code>:</p> <ul> <li><code>app-x</code></li> <li><code>app-common-1</code></li> <li><code>app-common-2</code></li> <li><code>app-common-3</code></li> <li><code>ui-a</code></li> </ul> <p>When we apply flavour <code>b</code>:</p> <p>It stops:</p> <ul> <li><code>app-x</code></li> <li><code>ui-a</code></li> </ul> <p>It starts:</p> <ul> <li><code>app-y</code></li> <li><code>ui-b</code></li> </ul> <p>All the 3 common apps keep running.</p> <pre><code>[[kustomize]]\npath = \"app-x\"\ntags = [\"a\", \"backend\"]\n\n[[kustomize]]\npath = \"app-y\"\ntags = [\"b\", \"backend\"]\n\n[[kustomize]]\npath = \"app-common-1\"\ntags = [\"a\", \"b\", \"backend\"]\n\n[[kustomize]]\npath = \"app-common-2\"\ntags = [\"a\", \"b\", \"backend\"]\n\n[[kustomize]]\npath = \"app-common-3\"\ntags = [\"a\", \"b\", \"backend\"]\n\n[[kustomize]]\npath = \"ui-a\"\ntags = [\"a\"]\n\n[[kustomize]]\npath = \"ui-b\"\ntags = [\"b\"]\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>This section is about configuring the tool itself rather than authoring workspaces.</p> <p>Ring can be configured using <code>settings.toml</code> and/or environment variables.</p> <p>Toml files may exist in 3 scopes:</p> <ul> <li>default - the base config shipped with the tool that should not be modified (as it gets overwritten when installing new version of ring) </li> <li>user - user-scoped config</li> <li>local - directory-scoped config</li> </ul> <p>The most specific scope takes precedence. Environment variables take precedence over <code>settings.toml</code>.</p>"},{"location":"configuration/#tasks","title":"Tasks","text":""},{"location":"configuration/#display-config-paths","title":"Display config paths","text":"<p>You can display paths of the above configs using <code>ring config-path</code> with an appropriate scope flag.</p>"},{"location":"configuration/#create-configs","title":"Create configs","text":"<p>You can also generate <code>settings.toml</code> using <code>ring config-create</code> (also with the right scope flag).</p>"},{"location":"configuration/#dump-configuration","title":"Dump configuration","text":"<p>You can verify how the fully-built configuration store looks like via <code>ring config-dump</code>.</p>"},{"location":"configuration/#configuration-keys","title":"Configuration keys","text":"<p>Note</p> <p>When configuring the below via environment variables use <code>RING_</code> prefix and replace <code>.</code> by <code>__</code> (double underscore). For example: <code>hooks.init.command</code> becomes <code>RING_HOOKS__INIT__COMMAND</code>.</p> <ul> <li><code>git.clonePath</code> - the path where ring clones the repos of apps that support it. Default: <code>$HOME/.ring/repos</code></li> <li><code>kustomize.cachePath</code> - the path of kustomize cache. Default: <code>$HOME/.ring/kustomize-cache</code></li> <li><code>workspace.startupSpreadFactor</code> - controls how quickly ring launches apps. Increase to spread launching over time. Default: <code>1500</code></li> <li><code>kubernetes.configPath</code> - which config path to use. <code>KUBECONFIG</code> env var takes precedence if set. Default: <code>$HOME/.kube/config</code></li> <li><code>kubernetes.allowedContexts</code> - making any changes to the cluster fails if the current context is not one from this list. Default: <code>[\"docker-desktop\", \"rancher-desktop\", \"minikube\"]</code></li> <li><code>hooks.init.command</code> - a command to be run on the workspace init hook event. Default: N/A</li> <li><code>hooks.init.args</code> - arguments to be passed to the above command. Default: N/A</li> </ul>"},{"location":"known-issues/","title":"Known issues","text":""},{"location":"known-issues/#permission-issue-on-apple-silicon","title":"Permission Issue on Apple Silicon","text":"<p>Running Ring! on Apple Silicone with .NET 6 (x64) installed can result in permission errors such as this one:</p> <pre><code>['/etc/dotnet/install_location_x64'] failed to open: Permission denied.\n</code></pre> <p>To resolve this issue add your user to the <code>dotnet</code> directory (and its enclosed items) with <code>Read &amp; Write</code> permissions.</p>"},{"location":"use-cases/","title":"Use cases","text":"<p>Warning</p> <p>Work in progress. The docs are not yet complete.</p>"},{"location":"dotnet-cli/","title":"Index","text":"<p>Ring dotnet cli tool is a meta-orchestrator helping developers transition from monolithic systems into microservice cloud-based systems. </p> <p>--&gt; Docs on GitHub &lt;--</p>"},{"location":"runnables/aspnetcore/","title":"ASP.NET Core runnable","text":"<p>It runs ASP.NET Core and other .NET Core apps. </p>"},{"location":"runnables/aspnetcore/#syntax","title":"Syntax","text":"<pre><code>[[aspnetcore]]\nsshRepoUrl = \"git@your.git.server:path/to/repo.git\"\ncsproj = \"path/to/your/project.name.csproj\"\nurls = [\"http://localhost:6201/\"]\n</code></pre>"},{"location":"runnables/aspnetcore/#config-keys","title":"Config keys","text":"<ul> <li> <p><code>sshRepoUrl</code> (optional <code>string</code>) - if set Ring clones the default branch (usually <code>main</code>) of the specified repo and attempts to build and execute the project specified by the <code>csproj</code> key. Ring clones are located at <code>%TEMP%/ring/repos/path/to/repo</code>. If the clone already exists Ring preforms <code>git pull</code> instead.</p> </li> <li> <p><code>csproj</code> (mandatory <code>string</code>) - if <code>sshRepoUrl</code> is used then <code>csproj</code> must be a relative path and the project is loaded from <code>%TEMP%/ring/repos/path/to/repo/${csProj}</code>. If <code>sshRepoUrl</code> is not set then <code>csproj</code> may be either absolute or relative.</p> </li> <li> <p><code>urls</code> (optional <code>string[]</code>) - one or more URLs that are passed to the <code>ASPNETCORE_URLS</code> env variable</p> </li> </ul>"},{"location":"runnables/aspnetcore/#how-it-works","title":"How it works","text":"<p>Given project name is <code>project.name</code> Ring scans project's build ouput for either a <code>project.name.exe</code> file (.NET Core 3.1) or <code>project.name.dll</code>. Exes are run directly whereas dlls are executed using <code>dotnet exec</code>. </p>"},{"location":"runnables/aspnetcore/#environment-variables","title":"Environment variables","text":"<p>Ring passes the following env variables to the spawned process:</p> <ul> <li><code>ASPNETCORE_ENVIRONMENT</code> = <code>Development</code></li> <li><code>ASPNETCORE_URLS</code> = the value of <code>urls</code> from runnable configuration (values joined by <code>;</code>)</li> </ul>"},{"location":"runnables/aspnetcore/#health-check","title":"Health check","text":"<p>Ring does a simple \"is the process alive\" check. </p>"},{"location":"runnables/iisexpress/","title":"IIS Express runnable","text":"<p>It runs .NET Framework WCF services and ASP.NET MVC websites.</p>"},{"location":"runnables/iisexpress/#syntax","title":"Syntax","text":"<pre><code>[[iisexpress]]\ncsproj = \"path/to/your/project.csproj\"\n</code></pre>"},{"location":"runnables/iisexpress/#how-it-works","title":"How it works","text":"<p>IIS Express runnable expects the following XML elements exist in csproj file: <pre><code>&lt;Project&gt;\n    &lt;ProjectExtensions&gt;\n        &lt;VisualStudio&gt;\n            &lt;FlavorProperties GUID=\"{349c5851-65df-11da-9384-00065b846f21}\"&gt;\n            &lt;WebProjectProperties&gt;\n                &lt;DevelopmentServerPort&gt;90&lt;/DevelopmentServerPort&gt;\n                &lt;IISUrl&gt;http://domain.name:90/&lt;/IISUrl&gt;\n            &lt;/WebProjectProperties&gt;\n            &lt;/FlavorProperties&gt;\n        &lt;/VisualStudio&gt;\n    &lt;/ProjectExtensions&gt;\n&lt;/Project&gt;\n</code></pre></p> <p>Ring before 1.1.10 only uses <code>DevelopmentServerPort</code> and assumes <code>localhost</code> when running IIS Express. Version 1.1.10 and later versions support non-localhost bindings by utilising <code>IISUrl</code> first and falling back to <code>DevelopmentServerPort</code> if <code>IISUrl</code> is not found.</p>"},{"location":"runnables/iisexpress/#health-check","title":"Health check","text":"<p>Ring does a simple \"is IIS Express process alive\" check. Additionally for WCF services it detects all the <code>.svc</code> files in the project directory and checks whether they return HTTP 200.  </p>"},{"location":"runnables/kustomize/","title":"Kustomize runnable","text":"<p>It runs Kustomize apps in a Kubernetes cluster.</p>"},{"location":"runnables/kustomize/#requirements","title":"Requirements","text":"<ul> <li>A local K8s cluster</li> <li>Installed <code>kubectl</code> and <code>kustomize</code> </li> </ul>"},{"location":"runnables/kustomize/#supported-paths","title":"Supported paths","text":"<p>Ring supports every path supported by Kustomize (go-getter) </p>"},{"location":"runnables/kustomize/#caching","title":"Caching","text":"<p>Ring caches generated manifests to speed up subsequent executions. The default cache location is <code>/tmp/kustomize-cache</code> and can be configured </p>"},{"location":"runnables/kustomize/#syntax","title":"Syntax","text":"<pre><code>[[kustomize]]\npath = \"ssh://git@your.domain/repo.git/path/to/app?ref=branch-name\"\n\n[[kustomize]]\npath = \"local/app\"\n</code></pre>"}]}